# Set keyboard layout
# Default is fine for me

# Verify boot mode
ls /sys/firmware/efi/efivars

# Connect to internet 

  ## If not working, check if network controller module is loaded
  lspci -k | grep -A 4 Network controller
  dmesg | grep <kernel modules>
  
  ## Connect to WIFI (easy config)
  wifi-menu
  
  ## Connect to WIFI (harder)
  iw dev # Get interface name
  ip link set <interface name> up # Activate interface
  iw dev interface scan | less # Scan for networks
  ### Configure wpa_supplicant (for WPA protected WIFI)
  wpa_passphrase <ssid> <passphrase> > /etc/wpa_supplicant/wpa_supplicant.conf
  wpa_supplicant -h | grep -A 5 drivers: # Get drivers name
  wpa_supplicant -D<driver name> -i<interface name> -c/etc/wpa_supplicant/wpa_supplicant.conf

  ## Get IP address (DHCP)
  systemctl start dhcpcd
  ## Get IP address (Static)

# Set clock
  timedatectl set-ntp true
  # timedatectl list-timezones # List timezones
  timedatectl set-timezone Europe/Paris

# Partition hard drives
  # Partitions on drive
  ## EFI System Partition: 550 MiB (Not on LVM or Software RAID) (source: http://www.rodsbooks.com/efi-bootloaders/principles.html)
  ## /boot Partition: 200 MiB (Not on LVM or Software RAID) (source: https://wiki.archlinux.org/index.php/partitioning#.2Fboot)
  ## LVM Partition: The rest of the disk
    # Partitions on LVM
      # Swap partition: (1,5 * RAM)
      # / (root) partition: The rest
      # /home partition: Not used yet
      # /var: Not used yet
      # Sources:
        # https://www.tnpi.net/wiki/Proper_sizing_of_disk_partitions
    # Create Volume Group: One command
    lvmdiskscan # List devices capable of being used as Physical Volumes
    vgcreate <volume_group> <device_name> <device_name> # Create a volume group and associates given devices
    # Create Volume Group: Multiple Commands
    pvcreate <device_name> # Create Physical Volume
    vgcreate <volume_group> <physical_volume> # Create Volume Group
    vgextend <volume_group> <physical_volume> # Add Physical Volume to Volume Group
    # Create Logical Volume
    lvcreate -L <size> <volume_group> -n <logical_volume_name>
    lvcreate -l +100%FREE <volume_group> -n <logical_volume_name> # To fill the rest of the Volume Group with one Logical Volume


# Setup swap
  mkswap <device>
  swapon <device>
  # fstab will be updated later with 'genfstab'

# Format partitions
  # EFI System Partition: FAT32
  mkfs.fat -F32 /dev/sdX1
  # /boot partition: ext4
  mkfs.ext <device>
  # / (root) partition: ext4
  mkfs.ext <device>

# Mount the filesystems
  # Mount / (root) to /mnt
  mount <device> /mnt -o noatime
  # Mount /boot to /mnt/boot
  mkdir /mnt/boot
  mount <device> /mnt/boot
  # Mount EFI System Partition to /mnt/efi (not EFISTUB)
  mkdir /mnt/efi
  mount <device> /mnt/efi
  
# Update mirror list
  # Install necessary package for 'rankmirrors'
  pacman -Su # Update local cache
  pacman -Sy pacman-contrib # Contains /usr/bin/rankmirrors
  # Backup previous mirrorlist
  cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
  # Download latest https mirrorlist
  curl -o /etc/pacman.d/https_mirrorlist https://www.archlinux.org/mirrorlist/all/https/
  # Uncomment all mirrors
  sed -i 's/^#Server/Server/' /etc/pacman.d/https_mirrorlist
  # Rank mirrors
  rankmirrors -n 20 /etc/pacman.d/https_mirrorlist > /etc/pacman.d/mirrorlist

# Install
  pacstrap /mnt base base-devel intel-ucode zsh gvim git wpa_supplicant dialog
  # 'dialog' is for 'wifi-menu'
  # gvim install vim and adds support for GTK/X, specifically the ```+clipboard``` feature (source: https://wiki.archlinux.org/index.php/Vim#Installation)

# Generate fstab file based on UUID
  genfstab -U /mnt >> /mnt/etc/fstab

# Chroot in system
  arch-chroot /mnt

# Set time (difference with first timedatectl ?)
  ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime
  hwclock --systohc

# Localization
  # Uncomment en_US.UTF-8 UTF-8 and other needed locales in /etc/locale.gen
  # Generate locales
  locale-gen
  # Set the LANG variable in /etc/locale.conf
  echo LANG=en_US.UTF-8 > /etc/local.conf
  
# Network Configuration
  # Create hostname file
  echo <hostname> > /etc/hostname
  # Configure localhost
  echo 127.0.0.1       localhost > /etc/hosts
  echo ::1             localhost ip6-localhost ip6-loopback >> /etc/host
  echo ff02::1         ip6-allnodes >> /etc/host
  echo ff02::2         ip6-allrouters >> /etc/host

# Set root password
  passwd
  
# Add user with home folder and zsh shell.
  useradd -m -g users -G wheel -s /bin/zsh MYUSERNAME
  passwd MYUSERNAME
  
# Allow 'wheel' group to execute any command with sudo
  # Uncomment # %wheel ALL=(ALL) ALL with 'visudo', 'sudo' package is in 'base-devel'
  visudo
  
# Initramfs
  # Add LVM2 hook
  Add lvm2 in /etc/mkinitcpio.conf, in HOOKS=(base ...)
  # Regenerate initrd image
  mkinitcpio -p linux
  
# Install GRUB
  pacman -S grub
  grub-mkconfig -o /boot/grub/grub.cfg
  grub-install --target=x86_64-efi --efi-directory=efi --bootloader-id=GRUB
  # It is normal if you get 'WARNING: Failed to connect to lvmetad. (source: https://wiki.archlinux.org/index.php/GRUB#Warning_when_installing_in_chroot)
  
# Exit new system with 'exit' or Ctrl+D
  exit

# Unmount all partitions
  umount -R /mnt
  swapoff -a
 
# Reboot
  reboot
  
# Access EFI Shell
  map # List devices
  <device>: # Access device
  bcfg boot dump # List boot devices
  bcfg boot add <number> FS0:\<path_to_file\grubx64.efi "GRUB"

### Post Install

# Update all packages
pacman -Syu

# Install useful packages
pacman -S wget curl

# Connect to WIFI with NetworkManager
pacman -S networkmanager # nmcli in 'networkmanager' packet
systemctl enable NetworkManager
systemctl start NetworkManager
nmcli dev wifi connect <ssid> password <password>

# Install and configure Xorg
pacman -S xorg # 'xorg' is a package group
pacman -S xorg-xinit # Why is it not in 'xorg' package group ?
# Configure zshrc
  # Add launch startx
# Configure xinitrc
  # Add exec i3

# Install i3wm
pacman -S i3 dmenu # 'i3' is a package group

# Install libinput for Xorg (not necessary for Wayland)
pacman -S xf86-input-libinput



# Configure fonts
fontconfig

# For bluetooth headset
pacman -S pulseaudio-alsa pulseaudio-bluetooth bluez-utils
systemctl enable bluetooth
systemctl start bluetooth

pulseaudio --start
bluetoothctl
power on
agent on
default-agent
scan on
# Set device in pairing mode, this should prompt a new device
pair <MAC Address>
connect <MAC Address>
trust <MAC Address>
scan off
exit

# Add the following to '/etc/pulse/default.pa'
  ### automatically switch to newly-connected devices
  load-module module-switch-on-connect



# Install AUR Helper: aurman

## Install PGP key for aurman
wget https://github.com/polygamma.gpg
gpg --import polygamma.gpg
rm polygamma.gpg

## Install aurman
git clone https://aur.archlinux.org/aurman-git.git
cd aurman-git/
makepkg -si --needed --noconfirm # -s: install missing dependencies, -i: install, --needed: do not reinstall up-to-date targets
cd ..
rm -rf aurman-git/


# Other packages
xterm
firefox
thunderbird
openssh
keepassxc
ranger
ark
libreoffice
alsamixer
okular # PDF Reader
lsof ?
python
pidgin
gimp
inkscape
openvpn

# Install tldr
pacman -S tldr

rsync smartmontools tcpdump mtr ntp nmap
dhclient
dnsmasq
bind-tools # Can be installed as dnsutils, contains dig and ns-lookup

# Install printers drivers
pacman -S cups cups-pdf # cups-pdf allows to print to pdf
systemctl enable org.cups.cupsd.service
sytemctl start org.cups.cupsd.service
## To change where cups-pdf saves files, edit "/etc/cups/cups-pdf.conf"
## Add 'wheel' group to cups admin
sudo sed -i '/SystemGroup/ s/$/ wheel/' /etc/cups/cups-files.conf

# Zero Configuration Networking
## Install Avahi
pacman -S avahi

## Enable printers discovery
systemctl enable cups-browsed
systemctl start cups-browsed
